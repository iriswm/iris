@startuml

/'

When the workshop receives a new order, each item to be created is stored as a
`Item` in the Iris site. When more than one item of the same time should be
created, a desired quantity can be specified.

Items track creation and modification times, can have notes and can be
canceled.

Items can also have priority over other items.

'/

object Item

Item : quantity
Item : created
Item : modified
Item : notes
Item : cancel_time
Item : cancel_reason
Item : has_priority

/'

Each item will be handled following a `Process`. Processes will determine the
set of steps (`Step` objects) needed to complete the item.

Each step has individual `instructions` and a simple `name`.

When a new item is created, the process is checked and an appropriate set of
tasks are created (`Task` objects) according to the process initial steps. Each
of this tasks, when completed, will span extra tasks according to another model
called `StepSpawn`. Also, some tasks will be spawned when a set of tasks for
the same item are completed (only when they are all completed). This steps
depending on sets of steps are kept in the model `StepConsolidation`.

'/

object Process

Item "n" -- "1" Process

object Step

Process "n" -- "m" Step

Step : name
Step : instructions

object Task

Task "n" -- "1" Step
Task "n" -- "1" Item

object StepSpawn
object StepConsolidation

StepSpawn "n" -- "1" Step
StepSpawn "n" -- "m" Step
StepConsolidation "n" -- "m" Step
StepConsolidation "n" -- "m" Step

/'

The 'steps' in the models `Step`, `Process`, `StepSpawn` and
`StepConsolidation` represent trees of tasks needed to consider an order
fulfilled.

The tasks can be completed by any worker, identified in the model `Worker` and
connected to an Django `User`. The tasks are marked as completed creating a new
entry in another model called `Commit`.

Is at this moment when the step tress will be checked to create the new tasks
if apply.

'/

object Worker
object auth.User

Worker "1" -- "1" auth.User

object Commit

Commit "1" -[#green]- "1" Task
Commit "n" -- "1" Worker

/'

The items in `Item` and `Commit` are timestamped to keep track of the amount of
time needed by each item in an Order and offer proper estimations and reports.
The commits also have `notes`.

'/

Item : created
Item : modified
Commit : created
Commit : modified
Commit : notes

/'

The main purpose of the Iris site is to keep a list of station profiles in a
`Station` model and offer a detail page for each station when the workers in
the station can see the steps pending item and the information needed for each
step. The secondary purpose is to help with the estimation of order completion
times and the tertiary purpose is to offer insights into item efficiency and
performance.

'/

object Station

Step "n" -- "m" Station

/'

The interface will be keep as simple as possible and will have utilities to
ease the interaction using touch screens. A simple way to switch between
workers profiles or an alternative should be provided. Also, a system for
adding common notes using a few touches may be helpful.

'/

object NoteTemplate
NoteTemplate : kind = Commit|Delay|Suspension
NoteTemplate : text

/'

When a issue happens while working on an task, other models will be used to
keep track of them:

'/

/'

- The `Delay` model, with a specific time specified to hide the item in the
  station during that time and a note.

'/

object Delay

Delay "n" -[#orange]- "1" Task
Delay "n" -- "1" Worker

Delay : created
Delay : modified
Delay : notes
Delay : time

/'

- The `Suspension` model, for halts in items without time estimations, also
  with a note.

'/

object Suspension

Suspension "n" -[#red]- "1" Task
Suspension "n" -- "1" Worker

Suspension : created
Suspension : modified
Suspension : notes

/'

A system of notifications to handle delays or suspensions is also considerably
useful to have, but in the meantime, an screen to show them should be enough.

'/

@enduml
