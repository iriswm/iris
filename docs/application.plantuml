@startuml

/'

When an order is completed (or reaches a configured completion state) in a
WooCommerce site, a plugin notifies the Iris site with the order details. This
details are stored in the models `Order` and `Line`. Both models keep the
corresponding Wordpress ids and a copy of the order note field.

The items in the model `Line` also keep an identifier for the WooCommerce
category.

'/

object Order
object Line

Order "1" -- "n" Line

Order : wc_order_id
Order : wc_order_notes

Line : wc_order_item_id
Line : wc_category_id

/'

An extra field will keep track of internal Iris notes.

'/

Order : notes
Line : notes

/'

Both models track creation and modification times.

'/

Order : created
Order : modified
Line : created
Line : modified


/'

Each order and line can be canceled with a `reason` field. Either in the Iris
site or by the WooCommerce plugin.

Deletion of orders or lines will be notified to Iris to have the time and
reason updated. Reason will be a custom text like "Deleted in WooCommerce.".

When two orders are related because of a cancellation (ex: a correct new order
replaced an incorrect obsolete one) the operator in the WooCommerce site can
add this information in the order notes (and they will be notified by the
plugin, as said above).

'/

Order : cancel_time
Order : cancel_reason
Line : cancel_time
Line : cancel_reason

/'

In the Iris site, another model called `Category` maps each WooCommerce
category identifier with a set of items in the model `Task`. Each task has also
individual `instructions` and a simple `name`.

When a new item is created in the model `Line`, the category is checked and the
appropriate set of actual tasks are created as entries in a model called
`Work`. Each of this works, when completed, will span extra works according to
another model called `TaskSpawn`. Also, some tasks will be spawned when a set
of tasks for the same line are completed (only when they are all completed).
This tasks depending on sets of tasks are kept in the model
`TaskConsolidation`.

'/

object Category

Category : name
Category : wp_category_id

object Task

Category "n" -- "m" Task

Task : name
Task : instructions

object Work

Work "n" -- "1" Task
Work "n" -- "1" Line

object TaskSpawn
object TaskConsolidation

TaskSpawn "n" -- "1" Task
TaskSpawn "n" -- "m" Task
TaskConsolidation "n" -- "m" Task
TaskConsolidation "n" -- "m" Task

/'

The items in the models `Task`, `Category`, `TaskSpawn` and `TaskConsolidation`
represent trees of works needed to consider an order fulfilled.

The works can be completed by any worker, identified in the model `Worker` and
connected to an Django `User`. The works are marked as completed creating a new
item in another model called `Commit`. This commits also have `notes`.

Worker can have a picture to ease visual identification in the site views.

'/

object Worker
object auth.User

Worker "1" -- "1" auth.User

Worker : picture

object Commit

Commit "1" -[#green]- "1" Work
Commit "1" -- "1" Worker

Commit : notes

/'

The items in `Work` and `Commit` are timestamped to keep track of the amount of
time needed by each item in an Order and offer proper estimations and reports.
For the estimations, information about average times needed per task will be
recorded in the `Task` model.

'/

Work : created
Work : modified
Commit : created
Commit : modified
Task : avg_hours

/'

The main purpose of the Iris site is to keep a list of station profiles in a
`Station` model and offer a detail page for each station when the workers in
the station can see the tasks pending work and the information needed for each
task. The secondary purpose is to help with the estimation of order completion
times and the tertiary purpose is to offer insights into work efficiency and
performance.

'/

object Station

Task "n" -- "m" Station

/'

The interface will be keep as simple as possible and will have utilities to
ease the interaction using touch screens. A simple way to switch between
workers profiles or an alternative should be provided. Also, a system for
adding common notes using a few touches may be helpful.

'/

object NoteTemplate
NoteTemplate : kind = Order|Line|Commit|Delay|Suspension|Priority
NoteTemplate : text

/'

Abnormal workflows in works will be handled using extra models:

'/

/'

- The `Delay` model, with a specific time specified to hide the work in the
  station during that time and a note.

'/

object Delay

Delay "1" -[#orange]- "1" Work
Delay "1" -- "1" Worker

Delay : created
Delay : modified
Delay : time
Delay : notes

/'

- The `Suspension` model, for halts in works without time estimations, also
  with a note.

'/

object Suspension

Suspension "1" -[#red]- "1" Work
Suspension "1" -- "1" Worker

Suspension : created
Suspension : modified
Suspension : notes

/'

- The `Priority` model, to give extra priority to certain work from a specific
  date. This will override the default FIFO order for works with a different
  score. The higher the score the higher the priority.

'/

object Priority

Priority "1" -[#blue]- "1" Work
Priority "1" -- "1" Worker

Priority : created
Priority : modified
Priority : from
Priority : score
Priority : notes

/'

A system of alerts to handle delays or suspensions is also considerably useful
to have, but in the meantime, an screen to show them should be enough.

'/

@enduml
