@startuml

/'

When the workshop receives a new order, each item to be created is stored as a
`Item` in the Iris site. When more than one item of the same time should be
created, a desired quantity can be specified.

Items track creation and modification times, can have notes and can be
canceled.

Items can also have priority over other items.

A description field is also present in the items to add miscellaneous
information if needed.

'/

object Item

Item : quantity
Item : created
Item : modified
Item : notes
Item : cancel_time
Item : cancel_reason
Item : has_priority
Item : description

/'

Each item will be handled following a `Process`. Processes will determine the
set of steps (`Step` objects) needed to complete the item.

Processes have a `name`.

Each step has individual `instructions` and a simple `name`.

'/

object Process

Item "n" -- "1" Process

Process : name

object Step

Step : name
Step : instructions

/'

Objects `StepTransition` will be used to represent what steps are needed to
complete a process and the relation between those steps.

Step transitions have three fields. A `process` field pointing to the
associated process. An optional `required_steps` field, pointing to one or more
steps in the same process required for the transition to occur. A single
`creates` field with the `Step` object created for that particular transition.

To describe how the application stores the different kind of steps and
transitions, lets have this diagram into account:

--> 1 ----> 2 --> 3 --> 4 ----> 6 ------> 8
        \                  /         /
         -------- 5 -------         /
------------------------------> 7 --

The diagram represents the set of steps needed to complete a process. Each
number is a single step.

The steps 1 and 7 are created when a new item is added to the system and
assigned to a process. This is represented by two step transitions to the steps
1 and 7 with no requirements.

The steps 2, 3 and 4 are created by three transitions with steps 1, 2 and 3 as
their respective requirements. Step 5 is created by a transition requiring the
step 1. Similar to the transition to the step 2.

Steps 6 and 8 are created by transitions specifying the pairs 4-5 and 6-7 as
their requirements.

'/

object StepTransition

StepTransition "n" -- "1" Process
StepTransition "n" -- "m" StepTransition : required by
StepTransition "n" -- "1" Step

/'

When a new item is assigned to a process, the process field is frozen and the
transitions are checked to create an appropriate set of tasks (`Task` objects).
Each of this tasks, when completed, will span extra tasks until all tasks have
been spawned and completed.

Tasks track creation and modification times.

'/

object Task

Task "n" -- "1" StepTransition
Task "n" -- "1" Item

Task : created
Task : modified

/'

The tasks can be completed by any worker, identified in the model `Worker` and
connected to an Django `User`. The tasks are marked as completed creating a new
entry in another model called `Commit`.

Is at this moment when the step tress will be checked to create the new tasks
if apply.

The commits are timestamped to keep track of the amount of time needed by each
item in an Order and offer proper estimations and reports. The commits also
have `notes`.

'/

object Worker
object auth.User

Worker "1" -- "1" auth.User

object Commit

Commit "1" -[#green]- "1" Task
Commit "n" -- "1" Worker

Commit : created
Commit : modified
Commit : notes

/'

The main purpose of the Iris site is to keep a list of station profiles in a
`Station` model and offer a detail page for each station when the workers in
the station can see the steps pending item and the information needed for each
step. The secondary purpose is to help with the estimation of order completion
times and the tertiary purpose is to offer insights into item efficiency and
performance.

The stations have a name.

'/

object Station

Step "n" -- "m" Station

Station : name

/'

The interface will be keep as simple as possible and will have utilities to
ease the interaction using touch screens. A simple way to switch between
workers profiles or an alternative should be provided. Also, a system for
adding common notes using a few touches may be helpful.

'/

object NoteTemplate
NoteTemplate : kind = Commit|Delay|Suspension
NoteTemplate : text

/'

When a issue happens while working on an task, other models will be used to
keep track of them:

'/

/'

- The `Delay` model, with a specified time to hide the item in the station,
  notes and a timestamp.

'/

object Delay

Delay "n" -[#orange]- "1" Task
Delay "n" -- "1" Worker

Delay : created
Delay : modified
Delay : notes
Delay : time

/'

- The `Suspension` model, for halts in items without time estimations, also
  with notes and a timestamp.

'/

object Suspension

Suspension "n" -[#red]- "1" Task
Suspension "n" -- "1" Worker

Suspension : created
Suspension : modified
Suspension : notes

/'

A system of notifications to handle delays or suspensions is also considerably
useful to have, but in the meantime, an screen to show them should be enough.

'/

@enduml
