@startuml

/'

Each time the workshop receives a new order, each single item to be created is
stored as a `Work` in the Iris site.

Works track creation and modification times, can have notes and can be
cancelled.

'/

object Work

Work : created
Work : modified
Work : notes
Work : cancel_time
Work : cancel_reason

/'

Each work will be part of a `Category`. Categories will map each work to a set
of tasks (`Task` objects).

Each task has individual `instructions` and a simple `name`.

When a new work is created, the category is checked and an appropriate set of
jobs are created (`Job` objects). Each of this jobs, when completed, will span
extra works according to another model called `TaskSpawn`. Also, some tasks
will be spawned when a set of tasks for the same line are completed (only when
they are all completed). This tasks depending on sets of tasks are kept in the
model `TaskConsolidation`.

'/

object Category

Work "n" -- "1" Category

object Task

Category "n" -- "m" Task

Task : name
Task : instructions

object Job

Job "n" -- "1" Task
Job "n" -- "1" Work

object TaskSpawn
object TaskConsolidation

TaskSpawn "n" -- "1" Task
TaskSpawn "n" -- "m" Task
TaskConsolidation "n" -- "m" Task
TaskConsolidation "n" -- "m" Task

/'

The items in the models `Task`, `Category`, `TaskSpawn` and `TaskConsolidation`
represent trees of works needed to consider an order fulfilled.

The works can be completed by any worker, identified in the model `Worker` and
connected to an Django `User`. The works are marked as completed creating a new
item in another model called `Commit`.

Worker can have a picture to ease visual identification in the site views.

'/

object Worker
object auth.User

Worker "1" -- "1" auth.User

Worker : picture

object Commit

Commit "1" -[#green]- "1" Job
Commit "1" -- "1" Worker

/'

The items in `Work` and `Commit` are timestamped to keep track of the amount of
time needed by each item in an Order and offer proper estimations and reports.
For the estimations, information about average times needed per task will be
recorded in the `Task` model. The commits also have `notes`.

'/

Work : created
Work : modified
Commit : created
Commit : modified
Commit : notes
Task : avg_hours

/'

The main purpose of the Iris site is to keep a list of station profiles in a
`Station` model and offer a detail page for each station when the workers in
the station can see the tasks pending work and the information needed for each
task. The secondary purpose is to help with the estimation of order completion
times and the tertiary purpose is to offer insights into work efficiency and
performance.

'/

object Station

Task "n" -- "m" Station

/'

The interface will be keep as simple as possible and will have utilities to
ease the interaction using touch screens. A simple way to switch between
workers profiles or an alternative should be provided. Also, a system for
adding common notes using a few touches may be helpful.

'/

object NoteTemplate
NoteTemplate : kind = Commit|Delay|Suspension|Priority
NoteTemplate : text

/'

Abnormal workflows in works will be handled using extra models:

'/

/'

- The `Delay` model, with a specific time specified to hide the work in the
  station during that time and a note.

'/

object Delay

Delay "1" -[#orange]- "1" Job
Delay "1" -- "1" Worker

Delay : created
Delay : modified
Delay : notes
Delay : time

/'

- The `Suspension` model, for halts in works without time estimations, also
  with a note.

'/

object Suspension

Suspension "1" -[#red]- "1" Job
Suspension "1" -- "1" Worker

Suspension : created
Suspension : modified
Suspension : notes

/'

- The `Priority` model, to give extra priority to certain work from a specific
  date. This will override the default FIFO order for works with a different
  score. The higher the score the higher the priority.

'/

object Priority

Priority "1" -[#blue]- "1" Job
Priority "1" -- "1" Worker

Priority : created
Priority : modified
Priority : notes
Priority : from
Priority : score

/'

A system of alerts to handle delays or suspensions is also considerably useful
to have, but in the meantime, an screen to show them should be enough.

'/

@enduml
